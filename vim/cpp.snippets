# Snippets for C++ Develioment

snippet class "Make a class shell"
class $1$0
{
	public:
		$1();
		~$1();
	
	// Methods
	private:
		void helloWorld();	

	// Members
	private:
		double m_var;
};
endsnippet

snippet header "Makes standard .hpp header"
#ifndef $1
#define $1
$0
#endif
endsnippet

snippet rosmain "Makes a ros main function"
#include <rclcpp/rclcpp.hpp>

$1::$1::() : Node("$2")
{
	// Setting up a publisher, topic name and buffer size
	this->publisher_ = this->create_publisher<std_msgs::msg::String>("/topic", 10);

	// Setting up a subscriber, topic name, buffer and callback function
	this->subscriber_ = this->create_subscription<std_msgs::msg::String("/topic", 10, std::bind($$1::subCallback, this, _1));
	
}

$1::~$1::() : Node("$2")
{

}

void $1::subCallback(const std_msgs::msg::String::SharedPtr msg) const
{
	RCLCPP_INFO(this->get_logger(), "Information: %s", msg->data.c_str());
}

int main(int argc, char* argv[]) $0
{
	rclcpp::init(argc, argv);
	rclcpp::spin(std::make_shared<$1>());
	rclcpp::shutdown();
	return 0;
}
endsnippet


snippet rosclass "Makes a ros class shell"
class $1 : public rclcpp::Node $0
{
	public:
		$1();
		~$1();
	
	// Methods
	private:
		void subCallback(const std_msgs::msg::String::SharedPtr msg) const;

	// Members
	private:
		// Ros publisher
		rclcpp::Publisher<std_msgs::msg::String>::SharedPtr publisher_;
		// Ros subscriber
		rclcpp::Subscription<std_msgs::msg::String>::SharedPtr subscriber_;
};
endsnippet
